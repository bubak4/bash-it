#!/bin/bash
# Time-stamp: <2025-07-28 19:48:30 martin>
# gitw -- git wrapper for multiple repositories

# SCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )"
# cd $SCRIPTPATH || exit 1

UPSTREAM=${UPSTREAM:-"origin"}
MASTER_BRANCH=${MASTER_BRANCH:-"master"}
DEFAULT_BRANCHES=${DEFAULT_BRANCHES:-"master,release,dev"}

# parse the DEFAULT_BRANCHES variable into an array
IFS=',' read -ra BRANCH_ARRAY <<< "$DEFAULT_BRANCHES"
for branch in "${BRANCH_ARRAY[@]}"; do
    # Your processing logic here
    echo "Working on branch: $branch"
done

function usage() {
  echo "Usage: $(basename $0) [cmd-merge|cmd-push|<git-command>]"
  echo
  echo "Environment variables:"
  echo "  UPSTREAM=$UPSTREAM   ... set to upstream name"
  echo "  MASTER_BRANCH=$MASTER_BRANCH   ... set to name of a master/main branch"
  echo "  DEFAULT_BRANCHES=$DEFAULT_BRANCHES   ... set to name of a branches that are used for cmd-merge/cmd-push commands"
  exit 1
}

function comment_line() {
  local text="$1"
  echo ">> $text <<"
}

function comment_box() {
  local text="$1"
  local length=${#text}
  local border=$(printf '+%*s+\n' "$((length + 2))" '' | tr ' ' '-')

  echo "$border"
  echo "| $text |"
  echo "$border"
}

function find_config() {
  local cwd=$(pwd)
  local cfg_files=".gitwrapper .gitw"

  # Loop until we find .git-mine or reach the home directory
  while test "$cwd" != "/" ; do
    for cfg in $cfg_files ; do
      if test -f "$cwd/$cfg" ; then
        echo "${cwd}/${cfg}"
        return 0
      fi
    done
    cwd=$(dirname "$cwd")
  done
  return 1
}

# $1 .. cfg
function find_repos() {
  local cfg=$1

  if test -z "$cfg" ; then
    echo "unable to find config"
    exit 1
  fi

  for i in $(cat $cfg) ; do
    repo=$(realpath $(dirname $cfg)/$i)
    if test -d $repo -a -d $repo/.git ; then
      echo "$repo"
    fi
  done
}

# does not work very well (symlinks, terraform module referencing .git tags etc.)
function find_repos_fallback() {
  find $(pwd) -name .git -exec dirname {} \; 2>/dev/null
}

# "$@" .. command pass to git over repos
# uses global REPOS variable
function run_command() {
  comment_box "Running: git $*"
  for repo in $REPOS ; do
    cd $repo
    comment_line $(basename $repo)
    git "$@" || {
      echo "Error: git $* in $repo"
      exit 1
    }
  done
  comment_box "Done: git $*"
}

function create_default_branches() {
  $0 checkout $MASTER_BRANCH
  for i in "${BRANCH_ARRAY[@]}"; do
    if test "$i" = "$MASTER_BRANCH" ; then
      continue
    fi
    $0 checkout -b $i $MASTER_BRANCH
    $0 push -u $UPSTREAM $i
  done
}

function merge_all() {
  for i in "${BRANCH_ARRAY[@]}"; do
    $0 checkout $i
    $0 --set-upstream $UPSTREAM pull
  done

  log=""
  for i in "${BRANCH_ARRAY[@]}"; do
    $0 checkout $i
    for j in "${BRANCH_ARRAY[@]}"; do
      if test "$i" = "$j" ; then
        continue
      fi
      $0 merge $j
      log="$log\nmerge $i -> $j"
    done
  done
  comment_box "$(comment_line "Merge Summary")"
  echo -e $log
}

function push_all() {
  log=""
  for i in "${BRANCH_ARRAY[@]}"; do
    $0 checkout $i
    $0 push "$UPSTREAM"
    log="$log\npush ${UPSTREAM}/${i}"
  done
  comment_box "$(comment_line "Push Summary")"
  echo -e $log
}

if cfg=$(find_config) ; then
  REPOS=$(find_repos $cfg)
else
  echo "Unable to find config file (.gitwrapper or .gitw)"
  exit 1
fi

if test "$1" = "cmd-merge" ; then
  echo "Using default branches: $DEFAULT_BRANCHES"
  merge_all
elif test "$1" = "cmd-push" ; then
  echo "Using default branches: $DEFAULT_BRANCHES"
  push_all
elif test -z "$1" ; then
  usage
else
  run_command "$@"
fi
